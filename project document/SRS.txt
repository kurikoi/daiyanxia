1. Introduction
  1.1 Purpose
  The purpose of this document is to outline the requirements for the development of an Automatic Test Checking Service. This service aims to automate the process of grading tests or checklists by recognizing and comparing answers provided by users with correct answers.
  1.2 Scope
  The Automatic Test Checking Service will provide functionality for:
- Defining test templates or checklists.
- Recognizing and interpreting user-provided answers.
- Comparing recognized answers with correct answers.
- Calculating scores based on the comparison.
- Providing a user interface for inputting tests and viewing results.
  1.3 Definitions, acronyms, and abbreviations
  - SRS: Software Requirements Specification
- NLP: Natural Language Processing
- GUI: Graphical User Interface
- CLI: Command Line Interface
  1.4 References
  Research report and laws

2. Overall description
  2.1 Product Perspective
  The Automatic Test Checking Service will be a standalone application with the potential for integration with other systems in the future.
  2.2 Product Features
  - Test template creation and management.
- Answer recognition and interpretation using text processing techniques.
- Comparison of recognized answers with correct answers.
- Scoring calculation based on comparison results.
- User interface for inputting tests and viewing results.
  2.3 User Classes and Characteristics
- Teachers: Users responsible for creating and grading tests.
- Students: Users who take tests and receive grades.
  2.4 Operating Environment
The system will be implemented in Python and will run on platforms supported by Python, such as Windows, macOS, and Linux.
  
3. System Features
   3.1 Test Template Management
   Allow users to create, edit, and delete test templates.Each template should include a list of questions or items and their corresponding correct answers.
   3.2 Answer Recognition
   Implement text processing techniques to recognize and interpret user-provided answers.
   Handle various types of answers, including text, numerical, and multiple-choice.
   3.3 Comparison and Scoring
   Compare recognized answers with correct answers stored in test templates.
   Calculate scores based on the comparison results.
   3.4 User Interface
   Provide an intuitive user interface for inputting tests and viewing results.
   Consider both command-line and graphical interfaces for flexibility.

4. Specific requirements
   4.1 User Interfaces
   Command Line Interface (CLI): Provide a CLI for basic interaction and scripting.
   Graphical User Interface (GUI): Offer a GUI for more user-friendly interaction.
   4.2 Hardware Interfaces
   The system will not have direct hardware dependencies.
   4.3 Software Interfaces
   Python 3.x: The system will be implemented in Python.
   Additional libraries may be used for text processing and user interface development.
   4.4 Performance requirements
   The system should respond to user interactions in a timely manner.
   Processing of answers should be efficient even for large test datasets.
   4.5 Reliability
   The system should be robust and handle errors gracefully.
   Backup and restore functionality should be provided for test templates and results.
   4.6 Usability
   The user interface should be intuitive and easy to navigate.
   Help documentation should be available to assist users.
  